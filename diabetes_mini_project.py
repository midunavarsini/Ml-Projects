# -*- coding: utf-8 -*-
"""Diabetes_Mini_Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eaZ6jWXv_-QIrOU7UJeRJrZSs0Z_6xs8
"""

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 5GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All"
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# %matplotlib inline
sns.set_style('whitegrid')

# %config InlineBackend.figure_format = 'retina'
from sklearn.metrics import classification_report
from collections import Counter
import warnings
warnings.filterwarnings('ignore')

df=pd.read_csv('diabetes.csv')
df.head()



"""checking for the null values"""

df.isna().sum()

df.columns

"""Replacing the value 0 with Nan"""

col = [   'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin',
       'BMI', 'DiabetesPedigreeFunction', 'Age' ]
for i in col:
    df[i].replace(0, np.nan,inplace=True)

df.isna().sum()

"""fuction is created to calculate median"""

def det_median(col_name):
    select_not_null=df[df[col_name].notnull()]
    result=select_not_null[[col_name,'Outcome']].groupby(['Outcome'])[[col_name]].median().reset_index()
    return result

det_median('BMI')

det_median('Insulin')

det_median('Pregnancies')

det_median('BloodPressure')

det_median('SkinThickness')

det_median('DiabetesPedigreeFunction')

det_median('Glucose')

"""Here null values is replaced by median .
here we created seperate median i.e for outcome 0 and 1
"""

df.loc[(df['Outcome']==0) & (df['BMI'].isnull()),'BMI'] =30.1
df.loc[(df['Outcome']==1) & (df['BMI'].isnull()),'BMI'] =30.1
df.loc[(df['Outcome']==0) & (df['Glucose'].isnull()),'Glucose'] =107.0
df.loc[(df['Outcome']==1) & (df['Glucose'].isnull()),'Glucose'] =140.0
df.loc[(df['Outcome']==0) & (df['BloodPressure'].isnull()),'BloodPressure'] =70.0
df.loc[(df['Outcome']==1) & (df['BloodPressure'].isnull()),'BloodPressure'] =74.5
# df.loc[(df['Outcome']==0) & (df['Pregnancies'].isnull()),'Pregnancies'] =3
# df.loc[(df['Outcome']==1) & (df['Pregnancies'].isnull()),'Pregnancies'] =5
df.loc[(df['Outcome']==0) & (df['Insulin'].isnull()),'Insulin'] =102.5
df.loc[(df['Outcome']==1) & (df['Insulin'].isnull()),'Insulin'] =169.5
df.loc[(df['Outcome']==0) & (df['SkinThickness'].isnull()),'SkinThickness'] =27.0
df.loc[(df['Outcome']==1) & (df['SkinThickness'].isnull()),'SkinThickness'] =32.0

df.isna().sum()

"""**Checking the outliers and removing it with the median**"""

#sns.PairGrid(data = df.Age)

sns.boxplot(df.Age)

det_median('Age')

df.loc[(df['Outcome']==0) & (df['BMI'] >52),'BMI'] =30.1
df.loc[(df['Outcome']==1) & (df['BMI']>52),'BMI'] =30.1

df.loc[(df['Outcome']==0) & (df['BloodPressure']>105),'BloodPressure'] =70.0
df.loc[(df['Outcome']==1) & (df['BloodPressure']>105),'BloodPressure'] =74.5
df.loc[(df['Outcome']==0) & (df['Pregnancies']>12),'Pregnancies'] =2
df.loc[(df['Outcome']==1) & (df['Pregnancies']>12),'Pregnancies'] =4
df.loc[(df['Outcome']==0) & (df['Insulin']>250),'Insulin'] =102.5
df.loc[(df['Outcome']==1) & (df['Insulin']>250),'Insulin'] =169.5
df.loc[(df['Outcome']==0) & (df['SkinThickness']>40),'SkinThickness'] =27.0
df.loc[(df['Outcome']==1) & (df['SkinThickness']>40),'SkinThickness'] =32.0
df.loc[(df['Outcome']==0) & (df['DiabetesPedigreeFunction']>1),'DiabetesPedigreeFunction'] =0.336
df.loc[(df['Outcome']==1) & (df['DiabetesPedigreeFunction']>1),'DiabetesPedigreeFunction'] =0.449

df.loc[(df['Outcome']==0) & (df['SkinThickness']<20),'SkinThickness'] =27.0
df.loc[(df['Outcome']==1) & (df['SkinThickness']<20),'SkinThickness'] =32.0
df.loc[(df['Outcome']==0) & (df['BloodPressure']<40),'BloodPressure'] =70.0
df.loc[(df['Outcome']==1) & (df['BloodPressure']<40),'BloodPressure'] =74.5

# Index(['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin',
#        'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome'],

"""splitting the dataset for testing and tranning"""



X=df.drop(['Outcome'],axis=1)
y=df['Outcome']

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=0)



from sklearn.ensemble import RandomForestRegressor
rforest = RandomForestRegressor()
rforest.fit(X_train,y_train)
rforest.score(X_test,y_test)